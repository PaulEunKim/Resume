{"version":3,"sources":["webpack:///./src/ViewSDKClient.js","webpack:///./src/pages/InLine.js"],"names":["ViewSDKClient","this","readyPromise","Promise","resolve","window","AdobeDC","document","addEventListener","adobeDCView","undefined","ready","previewFile","divId","viewerConfig","config","clientId","View","content","location","url","metaData","fileName","previewFileUsingFilePromise","filePromise","promise","registerSaveApiHandler","registerCallback","Enum","CallbackType","SAVE_API","options","console","log","setTimeout","response","code","ApiResponseCode","SUCCESS","data","Object","assign","updatedAt","Date","getTime","registerEventsHandler","EVENT_LISTENER","event","enablePDFAnalytics","InLine","componentDidMount","viewSDKClient","then","embedMode","render","className","id","Component"],"mappings":"yIA2IeA,EAhII,WACf,aACIC,KAAKC,aAAe,IAAIC,SAAQ,SAACC,GACzBC,OAAOC,QACPF,IAGAG,SAASC,iBAAiB,2BAA2B,WACjDJ,UAIZH,KAAKQ,iBAAcC,EACtB,kBAgHA,OAhHA,EAEDC,MAAA,WACI,OAAOV,KAAKC,cACf,EAEDU,YAAA,SAAYC,EAAOC,GACf,IAAMC,EAAS,CAEXC,SAAU,oCAoCd,OAlCIH,IAEAE,EAAOF,MAAQA,GAGnBZ,KAAKQ,YAAc,IAAIJ,OAAOC,QAAQW,KAAKF,GAGhBd,KAAKQ,YAAYG,YAAY,CAEpDM,QAAS,CAELC,SAAU,CACNC,IAAK,oGAabC,SAAU,CAENC,SAAU,0BAIfR,IAGN,EAEDS,4BAAA,SAA4BV,EAAOW,EAAaF,GAE5CrB,KAAKQ,YAAc,IAAIJ,OAAOC,QAAQW,KAAK,CAEvCD,SAAU,mCAEVH,UAIJZ,KAAKQ,YAAYG,YAAY,CAEzBM,QAAS,CAELO,QAASD,GAGbH,SAAU,CAENC,SAAUA,IAEf,KACN,EAEDI,uBAAA,WAkBIzB,KAAKQ,YAAYkB,iBACbtB,OAAOC,QAAQW,KAAKW,KAAKC,aAAaC,UAjBnB,SAACT,EAAUH,EAASa,GAEvC,OADAC,QAAQC,IAAIZ,EAAUH,EAASa,GACxB,IAAI5B,SAAQ,SAAAC,GAEf8B,YAAW,WACP,IAAMC,EAAW,CACbC,KAAM/B,OAAOC,QAAQW,KAAKW,KAAKS,gBAAgBC,QAC/CC,KAAM,CACFlB,SAAUmB,OAAOC,OAAOpB,EAAU,CAACqB,WAAW,IAAIC,MAAOC,cAGjExC,EAAQ+B,KACT,UAOP,KAEP,EAEDU,sBAAA,WAEI5C,KAAKQ,YAAYkB,iBAEbtB,OAAOC,QAAQW,KAAKW,KAAKC,aAAaiB,gBAEtC,SAAAC,GACIf,QAAQC,IAAIc,KAGhB,CAEIC,oBAAoB,KAG/B,EA7Hc,GCIbC,EAAM,iGAqBP,OArBO,EACRC,kBAAA,WACI,IAAMC,EAAgB,IAAInD,EAC1BmD,EAAcxC,QAAQyC,MAAK,WAEvBD,EAAcvC,YAAY,UAAW,CAEjCyC,UAAW,gBAGtB,EAEDC,OAAA,WACI,OACI,oCACI,uCACA,yBAAKC,UAAU,qBACX,yBAAKC,GAAG,UAAUD,UAAU,mBAI3C,EArBO,CAASE,aAwBNR","file":"component---src-pages-in-line-js-80b576dcfdc48958a383.js","sourcesContent":["/*\r\nCopyright 2020 Adobe\r\nAll Rights Reserved.\r\n\r\nNOTICE: Adobe permits you to use, modify, and distribute this file in\r\naccordance with the terms of the Adobe license agreement accompanying\r\nit. If you have received this file from a source other than Adobe,\r\nthen your use, modification, or distribution of it requires the prior\r\nwritten permission of Adobe.\r\n*/\r\n\r\nclass ViewSDKClient {\r\n    constructor() {\r\n        this.readyPromise = new Promise((resolve) => {\r\n            if (window.AdobeDC) {\r\n                resolve();\r\n            } else {\r\n                /* Wait for Adobe Document Services PDF Embed API to be ready */\r\n                document.addEventListener(\"adobe_dc_view_sdk.ready\", () => {\r\n                    resolve();\r\n                });\r\n            }\r\n        });\r\n        this.adobeDCView = undefined;\r\n    }\r\n\r\n    ready() {\r\n        return this.readyPromise;\r\n    }\r\n\r\n    previewFile(divId, viewerConfig) {\r\n        const config = {\r\n            /* Pass your registered client id */\r\n            clientId: \"240b8ba1878e46c595869804f9d4272a\",\r\n        };\r\n        if (divId) { /* Optional only for Light Box embed mode */\r\n            /* Pass the div id in which PDF should be rendered */\r\n            config.divId = divId;\r\n        }\r\n        /* Initialize the AdobeDC View object */\r\n        this.adobeDCView = new window.AdobeDC.View(config);\r\n\r\n        /* Invoke the file preview API on Adobe DC View object */\r\n        const previewFilePromise = this.adobeDCView.previewFile({\r\n            /* Pass information on how to access the file */\r\n            content: {\r\n                /* Location of file where it is hosted */\r\n                location: {\r\n                    url: \"https://acrobat.adobe.com/link/review?uri=urn:aaid:scds:US:bd71b610-ae83-3ea3-bc72-db9bd95da0e1\",\r\n                    /*\r\n                    If the file URL requires some additional headers, then it can be passed as follows:-\r\n                    headers: [\r\n                        {\r\n                            key: \"<HEADER_KEY>\",\r\n                            value: \"<HEADER_VALUE>\",\r\n                        }\r\n                    ]\r\n                    */\r\n                },\r\n            },\r\n            /* Pass meta data of file */\r\n            metaData: {\r\n                /* file name */\r\n                fileName: \"Deblurring Images.pdf\"\r\n                /* file ID */\r\n                // id: \"6d07d124-ac85-43b3-a867-36930f502ac6\",\r\n            }\r\n        }, viewerConfig);\r\n\r\n        return previewFilePromise;\r\n    }\r\n\r\n    previewFileUsingFilePromise(divId, filePromise, fileName) {\r\n        /* Initialize the AdobeDC View object */\r\n        this.adobeDCView = new window.AdobeDC.View({\r\n            /* Pass your registered client id */\r\n            clientId: \"240b8ba1878e46c595869804f9d4272a\",\r\n            /* Pass the div id in which PDF should be rendered */\r\n            divId,\r\n        });\r\n\r\n        /* Invoke the file preview API on Adobe DC View object */\r\n        this.adobeDCView.previewFile({\r\n            /* Pass information on how to access the file */\r\n            content: {\r\n                /* pass file promise which resolve to arrayBuffer */\r\n                promise: filePromise,\r\n            },\r\n            /* Pass meta data of file */\r\n            metaData: {\r\n                /* file name */\r\n                fileName: fileName\r\n            }\r\n        }, {});\r\n    }\r\n\r\n    registerSaveApiHandler() {\r\n        /* Define Save API Handler */\r\n        const saveApiHandler = (metaData, content, options) => {\r\n            console.log(metaData, content, options);\r\n            return new Promise(resolve => {\r\n                /* Dummy implementation of Save API, replace with your business logic */\r\n                setTimeout(() => {\r\n                    const response = {\r\n                        code: window.AdobeDC.View.Enum.ApiResponseCode.SUCCESS,\r\n                        data: {\r\n                            metaData: Object.assign(metaData, {updatedAt: new Date().getTime()})\r\n                        },\r\n                    };\r\n                    resolve(response);\r\n                }, 2000);\r\n            });\r\n        };\r\n\r\n        this.adobeDCView.registerCallback(\r\n            window.AdobeDC.View.Enum.CallbackType.SAVE_API,\r\n            saveApiHandler,\r\n            {}\r\n        );\r\n    }\r\n\r\n    registerEventsHandler() {\r\n        /* Register the callback to receive the events */\r\n        this.adobeDCView.registerCallback(\r\n            /* Type of call back */\r\n            window.AdobeDC.View.Enum.CallbackType.EVENT_LISTENER,\r\n            /* call back function */\r\n            event => {\r\n                console.log(event);\r\n            },\r\n            /* options to control the callback execution */\r\n            {\r\n                /* Enable PDF analytics events on user interaction. */\r\n                enablePDFAnalytics: true,\r\n            }\r\n        );\r\n    }\r\n}\r\n\r\nexport default ViewSDKClient;\r\n","/*\r\nCopyright 2020 Adobe\r\nAll Rights Reserved.\r\n\r\nNOTICE: Adobe permits you to use, modify, and distribute this file in\r\naccordance with the terms of the Adobe license agreement accompanying\r\nit. If you have received this file from a source other than Adobe,\r\n\r\nthen your use, modification, or distribution of it requires the prior\r\nwritten permission of Adobe.\r\n*/\r\n\r\nimport React, { Component } from \"react\";\r\nimport ViewSDKClient from \"../ViewSDKClient\";\r\n\r\nclass InLine extends Component {\r\n    componentDidMount() {\r\n        const viewSDKClient = new ViewSDKClient();\r\n        viewSDKClient.ready().then(() => {\r\n            /* Invoke file preview */\r\n            viewSDKClient.previewFile(\"pdf-div\", {\r\n                /* Pass the embed mode option here */\r\n                embedMode: \"IN_LINE\"\r\n            });\r\n        });\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <>\r\n                <p>asdfasdf</p>\r\n                <div className=\"in-line-container\">\r\n                    <div id=\"pdf-div\" className=\"in-line-div\"/>\r\n                </div>\r\n            </>\r\n        );\r\n    }\r\n}\r\n\r\nexport default InLine;\r\n"],"sourceRoot":""}